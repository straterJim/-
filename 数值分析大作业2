# -*- coding: utf-8 -*-
"""
Created on Sun Nov 19 22:04:13 2017

@author: BUAA
"""

import numpy as np
from math import sin, sqrt, cos

class juzhen:
    def __init__(self,a):
        self.xishu=a
        self.n=len(a)
        self.ni=np.zeros((self.n,self.n))
        self.jingdu=1e-12
        
    def nisanjiao(self):
        a=self.xishu
        r=0
        while r<=self.n-3:
            mark=True
            temp=0
            temp2=0
            for i in range(r+2,self.n):
                if a[i][r]!=0:
                    mark=False
            if mark==True:
                r+=1
                continue
            for i in range(r+1,self.n):
                temp+=a[i][r]*a[i][r]
            dr=sqrt(temp)
            t=lambda x: 1 if x>0 else -1
            cr=-t(a[r+1][r])*dr
            hr=cr*cr-cr*a[r+1][r]
            ur=np.zeros((self.n,1))
            ur[r+1]=a[r+1][r]-cr
            for i in range(r+2,self.n):
                ur[i]=a[i][r]
            pr=self.JZchengXL(a.T,ur,hr,r)
            qr=self.JZchengXL(a,ur,hr,r)
            for i in range(r+1,self.n):
                temp2+=pr[i]*ur[i]
            tr=temp2/hr
            wr=np.zeros((self.n,1))
            for i in range(self.n):
                wr[i]=qr[i]-tr*ur[i]
            wu=np.zeros((10,10))
            up=np.zeros((10,10))
            for i in range(10):
                for j in range(10):
                    wu[i][j]=wr[i]*ur[j]
                    up[i][j]=ur[i]*pr[j]
            a=a-wu-up
            r+=1
        for i in range(self.n):
            for j in range(self.n):
                if abs(a[i][j])<self.jingdu:
                    a[i][j]=0
        self.ni=a
        return a
    
    def JZchengXL(self,A,b,c,r):
        t=np.zeros((self.n,1))
        for i in range(self.n):
            for j in range(r+1,self.n):
                t[i]+=A[i][j]*b[j]
        return t/c

    def qr(self):
        a=self.ni
        k=0
        l=50
        m=self.n
        lam=[]
        mk=np.zeros((self.n,self.n))
        while k<= l:
            if len(lam)==10:
                break
            a,m,lam = self.jianxiao(a,m,lam)
            #print('sss',m)
            #print('lam=',lam)
            if not m>2:
                continue
            s=a[m-2][m-2]+a[m-1][m-1]
            t=a[m-2][m-2]*a[m-1][m-1] - a[m-1][m-2]*a[m-2][m-1]
            #print('a=',a)
            #print('s=%f,t=%f'%(s,t))
            dw=np.eye(m)
            #print('shape=',a.shape)
            mk=np.dot(a,a)-s*a+t*dw
            #print('mk=',mk,'shape=',mk.shape)
            a=self.qr2(mk,a,m)
            #print('a',m,'=',a)
            k+=1
        return lam

    def qr2(self,b,c,m):
        #print('qr2')
        r=0
        while r <= m-2:
            temp=0
            mark=True
            for i in range(r+1,m):
                if b[i][r]!=0:
                    mark=False
            if mark==True:
                r+=1
                continue
            for i in range(r,m):
                temp+=b[i][r]*b[i][r]
            dr=sqrt(temp)
            t=lambda x: 1 if x>0 else -1
            cr=-t(b[r][r])*dr
            hr=cr*cr-cr*b[r][r]
            ur=np.zeros((m,1))
            ur[r]=b[r][r]-cr
            for i in range(r+1,m):
                ur[i]=b[i][r]
            vr=np.dot(b.T,ur)/hr
            b=b-np.dot(ur,vr.T)
            pr=np.dot(c.T,ur)/hr
            qr=np.dot(c,ur)/hr
            tr=np.dot(pr.T,ur)/hr
            wr=qr-tr*ur
            c=c-np.dot(wr,ur.T)-np.dot(ur,pr.T)
            r+=1
        return c

    def jianxiao(self,a,m,lam):
        if m==1:
            #print('jianxiao,m=1')
            lam.append((np.real(a[m-1][m-1]),np.imag(a[m-1][m-1])))
            m-=1
            return a[:m,:m],m,lam
        elif m==2:
            #print('jianxiao,m=2')
            s12=self.erjie(a[:m,:m],m)
            lam.append(s12[0])
            lam.append(s12[1])
            m-=2
            return a[:m,:m],m,lam
        else:
            if abs(a[m-1][m-2])<= self.jingdu:
                #print('jianxiao,niduijiao=0',m)
                lam.append((np.real(a[m-1][m-1]),np.imag(a[m-1][m-1])))
                m-=1
                return self.jianxiao(a[:m,:m],m,lam)
            elif abs(a[m-2][m-3]) <= self.jingdu:
                #print('eee,erjiewai=0',m)
                s12=self.erjie(a,m)
                lam.append(s12[0])
                lam.append(s12[1])
                m-=2
                return self.jianxiao(a[:m,:m],m,lam)
            else:
                #print('ddd,meiyou=0',m)
                return a[:m,:m],m,lam
             
    
    def erjie(self,a,m):
        s=[]
        t=a[m-2:m,m-2:m]
        det_t=t[0][0]*t[1][1]-t[0][1]*t[1][0]
        delta=(t[0][0]+t[1][1])**2-4*det_t
        a=(t[0][0]+t[1][1])/2
        if delta <0:
            b=sqrt(-delta)/2
            s.append((a,b))
            s.append((a,-b))
        else:
            dt=sqrt(delta)/2
            s.append((a+dt,0))
            s.append((a-dt,0))
        return s

class gauss:
    def __init__(self,a,b):
        self.xishu=a
        self.b=b
        self.len=len(self.xishu)
        self.x=np.zeros((self.len,1))

    def xuanzhuyuan(self,i):
        l={}
        a=self.xishu
        b=self.b
        for j in range(i,self.len):
            l[j]=a[j][i]
        max_a=max(l,key=l.get)
        if max_a != i:
            for j in range(self.len):
                temp=a[i][j]
                a[i][j]=a[max_a][j]
                a[max_a][j]=temp
            temp2=b[i]
            b[i]=b[max_a]
            b[max_a]=temp2
        return a,b
        
    def sanjiao(self):
        a=self.xishu
        b=self.b
        for i in range(self.len-1):
            a,b=self.xuanzhuyuan(i)
            for j in range(i+1,self.len):
                try:
                    m= float(a[j][i]/a[i][i])
                except:
                    print('gauss elimination is not working in this case!')
                b[j]=b[j]-m*b[i]
                for k in range(self.len):
                    a[j][k]-=m*a[i][k]
        return a,b

    def qiujie(self):
        a,b=self.sanjiao()
        x=self.x
        x[self.len-1]=1
        for j in range(self.len-2,-1,-1):
            t=0
            for n in range(j+1,self.len):
                t+=a[j][n]*x[n]
            x[j]=(-t)/a[j][j]
        return x

   
if __name__ =='__main__':
    n=10
    A=np.zeros((n,n))
    for i in range(n):
        A[i][i]=1.52*cos(2.2*(i+1))
        for j in range(i+1,n):
            A[i][j]=sin(0.5*(i+1)+0.2*(j+1))
        if i>=1:
            for j in range(i-1,-1,-1):
                A[i][j]=sin(0.5*(i+1)+0.2*(j+1))
    a=juzhen(A)
    ni=a.nisanjiao()
    l=a.qr()
    for i in range(n):
        print('第',i+1,'个特征值是：',l[i])
    dw=np.eye(n)
    d={}
    b=np.zeros((n,1))
    for i in range(n):
        if l[i][1] == 0:
            B=A-l[i][0]*dw
            g=gauss(B,b)
            jie=g.qiujie()
            d[str(i)]=jie
            print('对应第',i+1,'个特征值的特征向量是：\n',d[str(i)])
             
        
